#!/bin/bash
###
## Author: Willie Stevenson
##
## password-store
##
## This is a simple/naive password managing application managed by this script and sqlite.
##
## Version: 0.9 
###

BASE_PATH=`dirname $BASH_SOURCE`/

STORE_PATH=~/.pw

if [ -f $BASE_PATH/.schema-config ]
then
    source $BASE_PATH/.schema-config
elif [ -f $STORE_PATH/.schema-config ]
then
    source $STORE_PATH/.schema-config
elif [ -f $STORE_PATH/.schema-config ]
then
    source $STORE_PATH/.schema-config
else
    echo -e "\nConfig (.schema-config) could not be located. Exiting..."
    exit 1
fi

##
# Checks the existence of the password-store. If it doesn't exist, the program exits.
##
check_existance()
{
    if [ ! -f $STORE_PATH/$SQL_DB ]
    then
        echo -e "\nThe password-store has not been created or does not exist. Exiting..."
        exit 1
    fi
}

##
# -A | Adds a new service & corresponding password in the password-store
##
add_entry()
{
    check_existance
    read -p "Enter service name: " myService
    read -s -p "Enter service password: " myPassword
    $SQL_VER $STORE_PATH/$SQL_DB "INSERT INTO $SQL_TABLE (service_name, service_password, date_created) VALUES ('$myService', '$myPassword', datetime())";
    echo -e "\nStored password for service $myService.\n"
}

##
# -C | Creates a new password-store to store passwords in. This should be the first executed function on install.
##
create_password_store()
{
    # hash gpg 2>/dev/null || { echo >&2 "\tGPG is required to securely stash your passwords.\nPlease install gpg to continue.\n"; exit 1; }
    hash $SQL_VER 2>/dev/null || { echo >&2 "\t$SQL_VER is required to store passwords.\nPlease install $SQL_VER to continue.\n"; exit 1; }

    if [ -f $STORE_PATH/$SQL_DB ]
    then
        read -p "Creating a new password-store will overwrite the existing password-store, continue (Yy/Nn)?: " option
        
        while getopts “yYnN” option
        do
            case $option in
                Y|y)
                    break
                    ;;
                N|n)
                    echo -e "\nExiting password-store creation."
                    exit 1
                    ;;
             esac
        done
    fi

    $SQL_VER $SQL_DB "$SCHEMA"
    
    if [ ! -d $STORE_PATH ]
    then
        mkdir $STORE_PATH
    fi
    
    mv $SQL_DB $STORE_PATH/

    if [ -f .schema-config ]
    then
        mv .schema-config $STORE_PATH/
    fi

    chmod -R go-rwx $STORE_PATH

    echo -e "\nThe password-store has been created and is located here: $STORE_PATH/$SQL_DB"
}

##
# -D | Drops the password-store.
##
drop_password_store()
{
    check_existance
    rm -rf $STORE_PATH/$SQL_DB >&2
    echo -e "\nThe password-store has been dropped."
}

##
# -G | Generates a random password which can be used for a created service
##
generate_password()
{
    export LANG=C; cat /dev/random | tr -dc 'a-zA-Z0-9-_!@#$%^&*()_+{}|:<>?=' | fold -w $1 | head -n 1
}

##
# -g | gets a single entry from the password-store based on a passed service name.
##
get_entry_password()
{
    check_existance
    $SQL_VER $STORE_PATH/$SQL_DB "SELECT service_password FROM $SQL_TABLE WHERE service_name = '$1'";
    $SQL_VER $STORE_PATH/$SQL_DB "UPDATE $SQL_TABLE SET last_accessed = datetime() WHERE service_name = '$1'";
}

##
# -l | Lists all service names stored in the password-store
##
get_all_entry_names()
{
    check_existance
    $SQL_VER $STORE_PATH/$SQL_DB "SELECT service_name, last_accessed FROM $SQL_TABLE";
}

##
# -R | Removes a single entry from the password-store based on a passed service name.
##
remove_entry()
{
    check_existance
    $SQL_VER $STORE_PATH/$SQL_DB "DELETE FROM $SQL_TABLE WHERE service_name = '$1'";
    echo -e "\nRemoved password for service $1.\n"
}


##
# Main loop
##
while getopts “hACDG:g:lR:v” option
do
    case $option in
        h)   
            echo -e "password-store ver: 0.9\nRun '${0} -C' if beginning.\nOtherwise, see help for more details.\n\n"
            echo -e "Usage: ${0} [option => -hCGspvr] [param]\n"
            echo -e "\t -h Displays Usage.\n\n"
            echo -e "\t -A Add new service.\n"
            echo -e "\t -C Deletes any existing password-store and creates a new password-store database with $SQL_VER.\n"
            echo -e "\t -D Deletes the password-store database.\n"
            echo -e "\t -G Generates a random password from /dev/random. This argument requires password length size.\n\t\tEx. ${0} -G 50\n"
            echo -e "\t -g Get password by passing a stored service name.\n"
            echo -e "\t -l Lists all stored services.\n"
            echo -e "\t -R Used to remove an entry from the database by passing a service_name.\n\t\tEx. ${0} -R service\n"
            echo -e "\t -v Displays version info.\n"
            ;;
        A)  
            add_entry
            ;;
        C)
            create_password_store
            ;;
        D)
            drop_password_store
            ;;
        G)
            generate_password $OPTARG
            ;;
        g)
            get_entry_password $OPTARG
            ;;
        l)
            get_all_entry_names
            ;;
        R)
            remove_entry $OPTARG
            ;;
        v)
            echo -e "\npassword-store ver: 0.9"
            ;;
     esac

     exit 1
done